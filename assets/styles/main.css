:root {
  --primary-color: #007bff; /* A strong blue */
  --primary-hover-color: #0056b3; /* Darker blue for hover effect */
  --secondary-color: #6c757d; /* A neutral grey */
  --secondary-hover-color: #545b62; /* Darker grey for hover effect */
  --danger-color: #dc3545; /* A strong red for danger actions */
  --danger-hover-color: #bd2130; /* Darker red for hover effect */
  --background-color: #f8f9fa; /* A light grey for background */
  --text-color: #212529; /* A dark grey for text */
  --task-done-color: #28a745; /* A strong green for done tasks */
  --white: #ffffff; /* White color */
  --light-black: #00000020; /* Black color */

  /* We can add more colors here */
  --blue-gradient-start: #00e5ff; /* A blue color for gradient */
  --blue-gradient-stop: #2e22d4; /* A blue color for gradient */
}

/* We can also use CSS Nesting - https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Using_CSS_nesting */
/* We can also seperate each components styles in different files but the app is simple and i will keep everything here */

body {
  font-family: "Gill Sans", sans-serif;
  color: var(--text-color);
  background: linear-gradient(
    to bottom right,
    var(--blue-gradient-start),
    var(--blue-gradient-stop)
  );
  margin: 0;
  padding: 0;
}

#app {
  display: flex;
  flex-direction: column;
  height: 100vh;
  overflow: auto;
}

header,
footer {
  padding: 1em;
  text-align: center;
  background-color: var(--light-black);
}

header h1 {
  text-transform: uppercase;
  color: var(--white);
}

footer p {
  font-size: 0.8em;
  color: var(--white);
  opacity: 1;
}

main {
  flex-grow: 1;
  padding: 1em;
}

/* We can also use grid for positioning the tasks */
.task-list {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
}

.task {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  gap: 20px;
  min-width: 300px;
  background-color: var(--light-black);
  border: 1px solid #ddd;
  border-radius: 6px;
}

.task > .actions,
.task > .inputs {
  display: flex;
  gap: 8px;
  width: 100%;
}

.task > .inputs {
  flex-grow: 1;
  flex-direction: column;
  align-items: start;
  padding-right: 10px;
  justify-content: start;
}

.task input[type="checkbox"] {
  cursor: pointer;
}

.task textarea {
  border: 1px solid var(--secondary-color);
  width: 100%;
  border-radius: 6px;
  overflow: auto;
  padding: 5px;
  resize: vertical; /* Allow vertical resizing */
}

.task textarea:focus {
  outline: none;
  border-color: var(--primary-color);
}

.task textarea.done {
  text-decoration: line-through;
  color: var(--task-done-color);
}

.task textarea[readonly] {
  background-color: var(--background-color);
  resize: none;
  height: auto;
  border: #000 0.5px solid;
  flex-grow: 1;
}

button {
  background-color: var(--primary-color);
  color: white;
  border: none;
  padding: 5px 10px;
  border-radius: 6px;
  cursor: pointer;
}

button:hover {
  background-color: var(--primary-hover-color);
}

button.delete {
  background-color: var(--danger-color);
}

button.delete:hover {
  background-color: var(--danger-hover-color);
}

button.edit {
  background-color: var(--secondary-color);
}

button.edit:hover {
  background-color: var(--secondary-hover-color);
}

/* This styles the main scrollbar container */
::-webkit-scrollbar {
  width: 8px; /* width of the entire scrollbar */
  height: 4px; /* height of the entire scrollbar */
}

/* This styles the scrollbar track (the part the thumb slides within) */
::-webkit-scrollbar-track {
  background: #f1f1f1; /* color of the tracking area */
}

/* This styles the scrollbar thumb (the draggable element) */
::-webkit-scrollbar-thumb {
  background: var(--primary-color); /* color of the thumb */
  border-radius: 6px; /* roundness of the thumb */
  transition: all 0.5s;
}

/* This changes the thumb color on hover */
::-webkit-scrollbar-thumb:hover {
  background: #555; /* color of the thumb on hover */
  transition: all 0.5s;
}

/* We can make new CSS file for responsive only Design */
@media (max-width: 768px) {
  .task {
    flex-direction: column;
  }

  .task textarea {
    min-height: 100px;
  }
}
